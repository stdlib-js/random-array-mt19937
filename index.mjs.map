{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport fdtypes from '@stdlib/array-typed-real-float-dtypes';\nimport rdtypes from '@stdlib/array-typed-real-dtypes';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// VARIABLES //\n\nvar RDTYPES = rdtypes();\nvar FDTYPES = fdtypes();\nRDTYPES.push( 'generic' );\nFDTYPES.push( 'generic' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* ## Notes\n*\n* -   Validation modes:\n*\n*     -   `0`: factory validation\n*     -   `1`: integer PRNG validation\n*     -   `2`: normalized PRNG validation\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dtype] - output array data type\n* @param {string} [options.idtype] - output array data type when generating integers\n* @param {string} [options.rdtype] - output array data type when generating normalized numbers\n* @param {integer} mode - validation mode\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dtype': 'float64'\n* };\n* var err = validate( opts, options, 0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options, mode ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( mode === 0 ) {\n\t\tif ( hasOwnProp( options, 'idtype' ) ) {\n\t\t\topts.idtype = options.idtype;\n\t\t\tif ( RDTYPES.indexOf( opts.idtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'idtype', RDTYPES.join( '\", \"' ), opts.idtype ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'ndtype' ) ) {\n\t\t\topts.ndtype = options.ndtype;\n\t\t\tif ( FDTYPES.indexOf( opts.ndtype ) < 0 ) {\n\t\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'ndtype', FDTYPES.join( '\", \"' ), opts.ndtype ) );\n\t\t\t}\n\t\t}\n\t} else if ( mode === 1 && hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( RDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', RDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t} else if ( hasOwnProp( options, 'dtype' ) ) { // mode === 2\n\t\topts.dtype = options.dtype;\n\t\tif ( FDTYPES.indexOf( opts.dtype ) < 0 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', FDTYPES.join( '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport base from '@stdlib/random-base-mt19937';\nimport ctors from '@stdlib/array-typed-real-ctors';\nimport filledBy from '@stdlib/array-base-filled-by';\nimport nullary from '@stdlib/strided-base-nullary';\nimport format from '@stdlib/string-format';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Returns a function for creating arrays containing pseudorandom numbers generated using a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @param {Options} [options] - function options\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @param {string} [options.idtype=\"float64\"] - default data type when generating integers\n* @param {string} [options.ndtype=\"float64\"] - default data type when generating normalized numbers\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {Function} function for creating arrays\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* var mt19937 = factory();\n* // returns <Function>\n*\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*/\nfunction factory() {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar err;\n\n\topts = {\n\t\t'idtype': defaults.idtype,\n\t\t'ndtype': defaults.ndtype\n\t};\n\n\tnargs = arguments.length;\n\trand = mt19937;\n\tif ( nargs === 0 ) {\n\t\tprng = base;\n\t} else if ( nargs === 1 ) {\n\t\toptions = arguments[ 0 ];\n\t\tprng = base.factory( options );\n\t\terr = validate( opts, options, 0 );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tsetReadOnlyAccessor( rand, 'seed', getSeed );\n\tsetReadOnlyAccessor( rand, 'seedLength', getSeedLength );\n\tsetReadWriteAccessor( rand, 'state', getState, setState );\n\tsetReadOnlyAccessor( rand, 'stateLength', getStateLength );\n\tsetReadOnlyAccessor( rand, 'byteLength', getStateSize );\n\tsetReadOnly( rand, 'PRNG', prng );\n\tsetReadOnly( rand, 'normalized', normalized );\n\treturn rand;\n\n\t/**\n\t* Returns an array containing pseudorandom integers on the interval `[0, 4294967295]`.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction mt19937( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 1 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.idtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns an array containing pseudorandom numbers on the interval `[0, 1)` with 53-bit precision.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} len - array length\n\t* @param {Options} [options] - function options\n\t* @param {string} [options.dtype] - output array data type\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {(Array|TypedArray)} output array\n\t*/\n\tfunction normalized( len, options ) {\n\t\tvar ctor;\n\t\tvar out;\n\t\tvar err;\n\t\tvar dt;\n\t\tvar o;\n\t\tif ( !isNonNegativeInteger( len ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t\t}\n\t\to = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( o, options, 2 );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tdt = o.dtype || opts.ndtype;\n\t\tif ( dt === 'generic' ) {\n\t\t\treturn filledBy( len, prng.normalized );\n\t\t}\n\t\tctor = ctors( dt );\n\t\tout = new ctor( len );\n\t\tnullary( [ out ], [ len ], [ 1 ], prng.normalized );\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {Uint32Array} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.PRNG.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.PRNG.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.PRNG.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.PRNG.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {Uint32Array} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.PRNG.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {Uint32Array} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.PRNG.state = s;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns an array containing pseudorandom integers on the interval `[0, 4294967295]`.\n*\n* @name mt19937\n* @type {Function}\n* @param {NonNegativeInteger} len - array length\n* @param {Options} [options] - options\n* @param {string} [options.dtype=\"float64\"] - output array data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {(Array|TypedArray)} output array\n*\n* @example\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\nvar mt19937 = factory();\n\n\n// EXPORTS //\n\nexport default mt19937;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an array containing pseudorandom numbers generated using a 32-bit Mersenne Twister pseudorandom number generator.\n*\n* @module @stdlib/random-array-mt19937\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var arr = mt19937( 10 );\n* // returns <Float64Array>\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var arr = mt19937( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var arr = mt19937.normalized( 10 );\n* // returns <Float64Array>\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var arr = mt19937.normalized( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var rand = mt19937.factory();\n* // returns <Function>\n*\n* var arr = rand( 10 );\n* // returns <Float64Array>\n*\n* @example\n* import mt19937 from '@stdlib/random-array-mt19937';\n*\n* var rand = mt19937.factory();\n* // returns <Function>\n*\n* var arr = rand( 10, {\n*     'dtype': 'generic'\n* });\n* // returns [...]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n\n// exports: { \"factory\": \"main.factory\", \"normalized\": \"main.normalized\" }\n"],"names":["RDTYPES","rdtypes","FDTYPES","fdtypes","validate","opts","options","mode","isObject","TypeError","format","hasOwnProp","idtype","indexOf","join","ndtype","dtype","factory","nargs","rand","prng","err","defaults","mt19937","arguments","length","base","setReadOnlyAccessor","getSeed","getSeedLength","setReadWriteAccessor","getState","setState","getStateLength","getStateSize","setReadOnly","normalized","len","out","dt","o","isNonNegativeInteger","filledBy","ctors","nullary","PRNG","seed","seedLength","stateLength","byteLength","state","s","push","main"],"mappings":"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"}